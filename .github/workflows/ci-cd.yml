name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Black formatter check
      run: |
        pip install black
        black --check app tests

    - name: Run isort import sorting check
      run: |
        pip install isort
        isort --profile black --check-only app tests

    - name: Run pylint
      run: |
        pip install pylint
        pylint app --exit-zero --output-format=text --reports=no

  test:
    runs-on: ubuntu-latest
    needs: [code-quality]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpass
          MYSQL_DATABASE: fastapi_db_test
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
          MONGO_INITDB_DATABASE: fastapi_tasks_test
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run linting with flake8
      run: |
        pip install flake8
        flake8 app tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run type checking with mypy
      run: |
        pip install mypy types-PyYAML types-python-dateutil
        mypy app --ignore-missing-imports

    - name: Wait for services to be ready
      run: |
        # Wait for MySQL
        for i in {1..30}; do
          if mysqladmin ping -h127.0.0.1 -P3306 -uroot -ptestpass --silent; then
            echo "MySQL is ready"
            break
          fi
          echo "Waiting for MySQL..."
          sleep 2
        done
        
        # Wait for MongoDB
        for i in {1..30}; do
          if mongosh --host 127.0.0.1:27017 --eval "db.runCommand({ping: 1})" --quiet; then
            echo "MongoDB is ready"
            break
          fi
          echo "Waiting for MongoDB..."
          sleep 2
        done

    - name: Run database migrations
      run: |
        PYTHONPATH=. alembic upgrade head
      env:
        DATABASE_URL: mysql+mysqldb://testuser:testpass@127.0.0.1:3306/fastapi_db_test

    - name: Run tests with coverage
      run: |
        pytest --cov=app --cov=tests --cov-report=xml --cov-report=term-missing
      env:
        PYTHONPATH: .
        MYSQL_HOST: 127.0.0.1
        MYSQL_PORT: 3306
        MYSQL_USER: testuser
        MYSQL_PASSWORD: testpass
        MYSQL_DATABASE: fastapi_db_test
        MONGODB_URL: mongodb://testuser:testpass@localhost:27017/fastapi_tasks_test?authSource=admin
        MONGODB_DB: fastapi_tasks_test

    - name: Upload coverage reports
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage.xml
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  security-scan:
    runs-on: ubuntu-latest
    needs: [test]
    
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Bandit security linter
      run: |
        pip install bandit[toml]
        bandit -r app -f json -o bandit-report.json || true

    - name: Run Safety check for vulnerabilities
      run: |
        pip install safety
        safety check --json --output safety-report.json || true

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
